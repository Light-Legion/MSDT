import json
import logging
from ruwordnet import RuWordNet

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("data_classification.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# === –®–∞–≥ 1. –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –ø–æ–º–æ—â—å—é RuWordNet ===

# –ë–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å
expressive_status_dict = {
    "mood": {
        "text": {
            "negative": ["–≥—Ä—É—Å—Ç—å", "–ø–µ—á–∞–ª—å", "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ", "–∑–ª–æ—Å—Ç—å", "—É—Å—Ç–∞–ª–æ—Å—Ç—å", "—Å–ª—ë–∑—ã",
                         "–Ω–µ–Ω—É–∂–Ω–æ—Å—Ç—å", "–æ–±–º–∞–Ω", "–ø–æ—Ä–∞–∂–µ–Ω–∏–µ", "–∂–µ—Å—Ç–æ–∫–æ—Å—Ç—å" ],
            "positive": ["—Ä–∞–¥–æ—Å—Ç—å", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "–ª—é–±–æ–≤—å", "–æ–ø—Ç–∏–º–∏–∑–º", "—Å—á–∞—Å—Ç—å–µ", "–¥—Ä—É–∂–±–∞",
                         "—Å–º–µ—Ö", "—Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å", "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ", "–∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–ª—é–±–ª—é", "–ª—é–±–æ–≤—å" ],
            "neutral": ["—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "—Ç–∏—à–∏–Ω–∞", "–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ", "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", "–±–µ–∑–º–æ–ª–≤–∏–µ",
                        "–Ω–µ–π—Ç—Ä–∞–ª–∏—Ç–µ—Ç", "–æ–∂–∏–¥–∞–Ω–∏–µ", "–±–∞–ª–∞–Ω—Å", "—Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ" ]
        },
        "emoji": {
            "negative": ["üò¢", "üò°", "üò≠", "üòû", "üòî", "üò©", "ü•µ", "ü§¨", "ü´§", "üò∂‚Äçüå´Ô∏è", "ü•∂"],
            "positive": ["üòä", "üòç", "üòÅ", "üòé", "üéâ", "‚ù§Ô∏è", "üåû", "üëç", "‚ú®", "ü•∞", "ü§ó"],
            "neutral": ["üòê", "ü§î", "üò∂", "üôÑ", "üòè", "ü´¢", "ü§∑‚Äç‚ôÇÔ∏è", "ü§∑‚Äç‚ôÄÔ∏è", "üòë"]
        }
    },
    "worldview": {
        "text": {
            "optimistic": ["–≤–µ—Ä—é", "–±—É–¥—É—â–µ–µ —Å–≤–µ—Ç–ª–æ–µ", "–Ω–∞–¥–µ–∂–¥–∞", "–ª—É—á—à–µ–µ –≤–ø–µ—Ä–µ–¥–∏", "—Å–∏–ª—ã –≤–Ω—É—Ç—Ä–∏",
                           "–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", "–±—É–¥—É—â–µ–µ –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü", "–æ–ø—Ç–∏–º–∏–∑–º –≤ –∫–∞–∂–¥–æ–º —à–∞–≥–µ"],
            "pessimistic": ["–≤—Å—ë –ø–ª–æ—Ö–æ", "–Ω–µ—Ç —Å–º—ã—Å–ª–∞", "–Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è", "–±–µ—Å–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                            "—Å–≥—É—â–µ–Ω–∏–µ —Ç—É—á", "–∂–∏–∑–Ω—å –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞", "–Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ —Ü–µ–ª–∏"],
            "skeptical": ["—Å–æ–º–Ω–µ–Ω–∏—è", "–∫—Ä–∏—Ç–∏–∫–∞", "–Ω–µ –≤–µ—Ä—é", "–ª–æ–∂—å", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤",
                          "—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "–≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤", "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≤–∑–≥–ª—è–¥"]
        },
        "emoji": {
            "optimistic": ["üòä", "üåü", "‚ú®", "üåû", "üëç", "üéØ", "üåà", "üí™"],
            "pessimistic": ["üò¢", "üòî", "üò≠", "üò©", "üòü", "ü´§", "üò∂‚Äçüå´Ô∏è"],
            "skeptical": ["üôÑ", "ü§î", "üòè", "ü§∑‚Äç‚ôÇÔ∏è", "ü§∑‚Äç‚ôÄÔ∏è"]
        }
    },
    "provocative": {
        "text": {
            "political": ["—Å–≤–æ–±–æ–¥–∞", "–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–æ–ø–ø–æ–∑–∏—Ü–∏—è", "–º–∏—Ç–∏–Ω–≥", "—Ä–µ—Ñ–æ—Ä–º—ã",
                          "–≤—ã–±–æ—Ä—ã", "–æ–ø–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –ª–∏–¥–µ—Ä", "–¥–∏–∫—Ç–∞—Ç—É—Ä–∞", "–∫–æ—Ä—Ä—É–ø—Ü–∏—è"],
            "discrimination": ["–Ω–µ–Ω–∞–≤–∏–∂—É", "–Ω–µ—Ç–µ—Ä–ø–∏–º–æ—Å—Ç—å", "—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", "–∞–≥—Ä–µ—Å—Å–∏—è", "—Ä–∞—Å–∏–∑–º",
                               "–∫—Å–µ–Ω–æ—Ñ–æ–±–∏—è", "–ø—Ä–µ–∑—Ä–µ–Ω–∏–µ", "—Å—Ç–µ—Ä–µ–æ—Ç–∏–ø—ã", "–∞–Ω—Ç–∏—Å–µ–º–∏—Ç–∏–∑–º" ],
            "false_statements": ["–≤—Å–µ–º–∏—Ä–Ω—ã–π –∑–∞–≥–æ–≤–æ—Ä", "–Ω–µ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "—Ñ–∞–ª—å—à–∏–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
                                 "–º–Ω–∏–º—ã–µ —Ñ–∞–∫—Ç—ã", "—Å–ª—É—Ö–∏", "–ø—Å–µ–≤–¥–æ–Ω–∞—É—á–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]
        },
        "emoji": {
            "political": ["ü§¨", "‚úä", "üá∑üá∫", "üá∫üá¶", "üî¥", "‚öñÔ∏è"],
            "discrimination": ["ü§¨", "üò°", "üëé", "‚ùå"],
            "false_statements": ["üòè", "üôÑ", "ü§•", "üßê"]
        }
    },
    "manipulative": {
        "text": {
            "sympathy_request": ["–ø–æ–º–æ–≥–∏—Ç–µ", "–º–Ω–µ –ø–ª–æ—Ö–æ", "–∂–∞–ª—å", "—Ç—è–∂–µ–ª–æ", "–Ω—É–∂–¥–∞—é—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ",
                                 "–º–Ω–µ —Ç–∞–∫ —Ç—Ä—É–¥–Ω–æ", "—É –º–µ–Ω—è –≤—Å—ë —Ä–∞–∑–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è", "–º–Ω–µ —Å—Ç—Ä–∞—à–Ω–æ", "–º–Ω–µ —Ç–∞–∫ –æ–¥–∏–Ω–æ–∫–æ" ],
            "superiority": ["—è –ª—É—á—à–µ –≤—Å–µ—Ö", "–Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç", "—É–º–Ω–µ–µ –¥—Ä—É–≥–∏—Ö", "—è –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤",
                            "–º–æ–∏ –∏–¥–µ–∏ –ª—É—á—à–∏–µ", "—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—à–∏–±–∞—é—Å—å", "—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π, –∫—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç"],
            "indirect_aggression": ["–ø–ª–æ—Ö–∏–µ –ª—é–¥–∏", "–≤—Ä–µ–¥", "–Ω–∞–ø–∞–¥–µ–Ω–∏–µ", "–æ–±–≤–∏–Ω–µ–Ω–∏–µ", "–≤—ã –≤–∏–Ω–æ–≤–∞—Ç—ã",
                                    "—ç—Ç–æ –≤–∞—à–∞ –æ—à–∏–±–∫–∞", "—ç—Ç–æ –≤–∞—à–∞ –≤–∏–Ω–∞", "—ç—Ç–æ –≤–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞", "–º–Ω–µ —ç—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è"],
            "hidden_accusation": ["–∫—Ç–æ –≤–∏–Ω–æ–≤–∞—Ç", "–ø–æ—á–µ–º—É –≤—ã", "–≤—Å—ë –∏–∑-–∑–∞ –≤–∞—Å", "—è –±—ã –Ω–∏–∫–æ–≥–¥–∞ —Ç–∞–∫ –Ω–µ —Å–¥–µ–ª–∞–ª",
                                  "–≤—ã –∫–∞–∫ –≤—Å–µ–≥–¥–∞", "–≤—ã –æ–ø—è—Ç—å –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É", "–∫—Ç–æ –∂–µ —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç"]
        },
        "emoji": {
            "sympathy_request": ["üò¢", "üò≠", "üòü", "ü´§", "ü•∫", "üíî"],
            "superiority": ["üòé", "üòè", "ü§¥", "üë∏", "üëë", "üí∏", "üî•"],
            "indirect_aggression": ["ü§¨", "üò°", "‚ùå", "üëé", "üñï"],
            "hidden_accusation": ["üôÑ", "üò§", "ü§∑‚Äç‚ôÇÔ∏è", "ü§∑‚Äç‚ôÄÔ∏è"]
        }
    }
}

# –°–ª–æ–≤–∞—Ä—å —Å—Ç–æ–ø-—Å–ª–æ–≤
stopwords_dict = {
    "commercial": {
        "text": {
            "self_promotion": [
                "–ø—Ä–∏–≥–ª–∞—à–∞—é", "–∑–∞—Ö–æ–¥–∏—Ç–µ", "–º–æ–π –±–ª–æ–≥", "–º–æ–π –∫–∞–Ω–∞–ª", "–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å",
                "–¥–µ–ª—é—Å—å –æ–ø—ã—Ç–æ–º", "–º–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "—É–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ", "inst", "insta",
                "–∏–Ω—Å—Ç", "–∏–Ω—Å—Ç–∞", "–∏—â—É —Ä–∞–±–æ—Ç—É",
                "https://", "—Ä–µ–ø–æ—Å—Ç", "–∏—â–µ—à—å —Ä–∞–±–æ—Ç—É", "–≤–∞–∫–∞–Ω—Å–∏—è", "–æ–Ω–ª–∞–π–Ω",
            ],
            "sales": [
                "—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞", "—Å–∫–∏–¥–∫–∞", "—Ç–æ–≤–∞—Ä", "–ø—Ä–æ–¥–∞—é", "–∫—É–ø–∏—Ç—å", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
                "–∞–∫—Ü–∏—è", "–Ω–æ–≤–∏–Ω–∫–∞", "–¥–æ—Å—Ç–∞–≤–∫–∞", "–∑–∞–∫–∞–∑", "–ª—Å"
            ]
        }
    },
    "situational": {
        "text": {
            "personal_events": [
                "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "—Å–≤–∞–¥—å–±–∞", "—é–±–∏–ª–µ–π", "–≤—Å—Ç—Ä–µ—á–∞", "–≤ –æ—Ç–ø—É—Å–∫–µ",
                "–≤ –¥–æ—Ä–æ–≥–µ", "–ø–æ–µ–∑–¥–∫–∞", "–Ω–æ–≤—ã–π –≥–æ–¥", "–ø—Ä–∞–∑–¥–Ω–∏–∫"
            ],
            "calendar_events": [
                "–¥–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –æ—Ç–µ—á–µ—Å—Ç–≤–∞", "8 –º–∞—Ä—Ç–∞", "–Ω–æ–≤—ã–π –≥–æ–¥", "—Ä–æ–∂–¥–µ—Å—Ç–≤–æ",
                "–ø—Ä–∞–∑–¥–Ω–∏–∫", "–ø–æ–∑–¥—Ä–∞–≤–ª—è—é", "–∫–∞–Ω–∏–∫—É–ª—ã", "–≤—ã—Ö–æ–¥–Ω—ã–µ"
            ],
            "social_significant_events": [
                "–º–∏—Ç–∏–Ω–≥", "–≤—ã–±–æ—Ä—ã", "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞", "—á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ–µ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–µ",
                "–ø—Ä–æ–±–ª–µ–º–∞", "–Ω–æ–≤–æ—Å—Ç–∏", "–≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "–¥–æ–ª–ª–∞—Ä"
            ]
        }
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RuWordNet
wordnet = RuWordNet()

def expand_keywords_ruwordnet(keywords):
    expanded_keywords = set(keywords)
    for word in keywords:
        synsets = wordnet.get_synsets(word)
        for synset in synsets:
            for lemma in synset.senses:
                expanded_keywords.add(lemma.name.lower())  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ª–µ–º–º—ã –∏–∑ —Å–∏–Ω–æ–Ω–∏–º–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø
    return list(expanded_keywords)

# –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
logging.info("–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–æ–º–æ—â—å—é RuWordNet")
for category, subcategories in expressive_status_dict.items():
    for modality, sentiments in subcategories.items():
        if modality == "text":  # –†–∞—Å—à–∏—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
            for sentiment, keywords in sentiments.items():
                expressive_status_dict[category][modality][sentiment] = expand_keywords_ruwordnet(keywords)

# –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å—Ç–æ–ø-—Å–ª–æ–≤
for category, subcategories in stopwords_dict.items():
    for modality, sentiments in subcategories.items():
        if modality == "text":  # –†–∞—Å—à–∏—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
            for sentiment, keywords in sentiments.items():
                stopwords_dict[category][modality][sentiment] = expand_keywords_ruwordnet(keywords)

# === –®–∞–≥ 2. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ ===

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
input_file = "cleared_data.json"
output_file = "second_expressive_statuses.json"


logging.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ {input_file}")
with open(input_file, "r", encoding="utf-8") as file:
    data = json.load(file)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
logging.info("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤")
def classify_status(status, dictionary):
    status_lower = status.lower()

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    for category, subcategories in dictionary.items():
        for modality, sentiments in subcategories.items():
            if modality == "text":
                for sentiment, keywords in sentiments.items():
                    if any(keyword in status_lower for keyword in keywords):
                        return {category: sentiment}  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    for category, subcategories in dictionary.items():
        for modality, sentiments in subcategories.items():
            if modality == "emoji":
                for sentiment, keywords in sentiments.items():
                    if any(emoji in status for emoji in keywords):
                        return {category: sentiment}  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —ç–º–æ–¥–∑–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    return None


# –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤
expressive_statuses = []

for user in data:
    status_text = user.get("status", "")
    classification = classify_status(status_text, expressive_status_dict)
    if classification:
        user["status"] = {
            "text": status_text,
            "classification": classification
        }
        expressive_statuses.append(user)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–∫—Å–ø—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
with open(output_file, "w", encoding="utf-8") as file:
    json.dump(expressive_statuses, file, ensure_ascii=False, indent=4)

# === –®–∞–≥ 3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º–∏ ===

# –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
logging.info("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤")
def filter_stopwords(status, stopwords):
    status_lower = status.lower()
    for category, subcategories in stopwords.items():
        for modality, sentiments in subcategories.items():
            for sentiment, keywords in sentiments.items():
                if any(keyword in status_lower for keyword in keywords):
                    return True  # –°—Ç–∞—Ç—É—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    return False

# –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤
filtered_statuses = []

for user in expressive_statuses:
    status_text = user["status"]["text"]
    if not filter_stopwords(status_text, stopwords_dict):
        filtered_statuses.append(user)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
filtered_output_file = "cleared_second_expressive_statuses.json"


logging.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(data)}")
logging.info(f"–≠–∫—Å–ø—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(expressive_statuses)}")
logging.info(f"–≠–∫—Å–ø—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤: {len(filtered_statuses)}")


logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª {output_file}")
with open(filtered_output_file, "w", encoding="utf-8") as file:
    json.dump(filtered_statuses, file, ensure_ascii=False, indent=4)
logging.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")